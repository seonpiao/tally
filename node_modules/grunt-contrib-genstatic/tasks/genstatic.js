var path = require('path');
var fs = require('fs');
var template = require('art-template');
var uglify = require('uglify-js');
var extend = require('node.extend');
var cp = require('child_process');
var jade = require('jade');

module.exports = function(grunt) {
    var moduleJsFileTemplate = grunt.file.read(path.join(__dirname, '../tmpls/js.tmpl'));
    var moduleStylesheetFileTemplate = grunt.file.read(path.join(__dirname, '../tmpls/stylesheet.tmpl'));
    var beautify = function(code) {
        var ast = uglify.parse(code);
        var stream = uglify.OutputStream({
            beautify: true
        });
        ast.print(stream);
        return stream.toString();
    };
    grunt.registerMultiTask('genstatic', '', function() {
        var done = this.async();
        var data = this.data;

        var fileContent = grunt.file.read(data.file);

        var parser = new jade.Parser(fileContent, path.join(process.cwd(), data.file));

        var block = parser.parse();

        // console.log((block))

        var modules = [];

        var walk = function(block) {
            if (block.nodes) {
                block.nodes.forEach(function(node) {
                    walkNode(node);
                });
            }
        };

        var walkNode = function(node) {
            //include
            if (node.nodes) {
                node.nodes.forEach(function(node) {
                    walkNode(node);
                });
            } else {
                if (node.attributeNames && node.attributeNames.indexOf('data-module') !== -1) {
                    node.attrs.every(function(attr) {
                        var val = attr.val.replace(/"/g, '');
                        if (attr.name === 'data-module' && modules.indexOf(val) === -1) {
                            modules.push(val);
                            return false;
                        }
                        return true;
                    });
                }
                if (node.block) {
                    walk(node.block);
                }
                //处理下面这种情况
                //div.user-name= User.user_name
                //  include ../logoutButton/index
                if (node.code && node.code.block) {
                    walk(node.code.block);
                }
            }
        };

        walk(block);

        modules = modules.map(function(moduleName) {
            var info = {};
            info.name = moduleName;
            var jsPath = '';
            var stylesheetPath = '';
            var filePath = path.join(data.modulePath, moduleName);
            try {
                var stat = fs.statSync(filePath);
                if (stat.isDirectory()) {
                    var packageFile = path.join(filePath, 'package.json');
                    if (fs.existsSync(packageFile)) {
                        try {
                            var json = grunt.file.readJSON(packageFile);
                            if (json.js) {
                                jsPath = path.join(moduleName, json.js.replace(/\.js$/, ''));
                            }
                            if (json.stylesheet) {
                                stylesheetPath = path.join(moduleName, json.stylesheet);
                            }
                        } catch (e) {}
                    }
                }
            } catch (e) {}
            if (jsPath) {
                info.jsPath = path.join(data.prefix.js || '', jsPath);
            }
            if (stylesheetPath) {
                info.stylesheetPath = path.join(data.prefix.stylesheet || '', stylesheetPath);
            }
            return info;
        });
        var jsCode = template.compile(moduleJsFileTemplate)({
            modules: modules
        });
        var stylesheetCode = template.compile(moduleStylesheetFileTemplate)({
            modules: modules
        });
        jsCode = beautify(jsCode);
        // console.log(data.dest.js);
        stylesheetCode = stylesheetCode.replace(/(^\s+)/mg, '').replace(/\s+$/, '');
        if (data.dest.js) {
            grunt.file.write(data.dest.js, jsCode);
        }
        if (data.dest.stylesheet) {
            grunt.file.write(data.dest.stylesheet, stylesheetCode);
        }

        //exports static files
        ['image', 'fonts', 'externals'].forEach(function(dir) {
            cp.spawn('cp', ['-r', 'client/' + dir, 'dist/'], {
                cwd: process.cwd()
            })
        });
        done();
    });
};